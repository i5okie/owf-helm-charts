global:
  ingressSuffix: "-dev.apps.silver.devops.gov.bc.ca"

replicaCount: 1

# Endorser API image
image:
  repository: ghcr.io/openwallet-foundation/acapy-endorser-service/endorser
  pullPolicy: IfNotPresent
  tag: latest

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 5000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: endorser-api-tools.apps.silver.devops.gov.bc.ca
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# NetworkPolicy
networkPolicy:
  enabled: false # master switch; if false neither api nor proxy policies are rendered
  api:
    enabled: true
    # Additional user-provided ingress rules (merged after default proxy allowance when proxy enabled)
    extraIngress: []
    # Additional egress rules (defaults to allow all if empty)
    egress: []
  proxy:
    enabled: true
    # Additional ingress rules (defaults to allow all if empty)
    extraIngress: []
    # Additional egress rules (defaults to allow all if empty)
    egress: []

# Proxy (Caddy) component
proxy:
  enabled: false
  replicaCount: 3
  image:
    repository: image-registry.openshift-image-registry.svc:5000/4a9599-tools/aries-endorser-proxy
    tag: dev
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      agent: 2015
      admin: 2016
      endorserService: 2017
  ingress:
    enabled: false
    className: ""
    annotations: {}
    # Three hostnames mapping to the three exposed ports (agent websocket/http, admin, endorser service)
    hosts:
      # Each host entry: host + list of paths referencing which servicePort (agent|admin|endorser)
      - host: aries-endorser-agent-dev.apps.silver.devops.gov.bc.ca
        paths:
          - path: /
            pathType: ImplementationSpecific
            servicePort: agent
      - host: aries-endorser-agent-admin-dev.apps.silver.devops.gov.bc.ca
        paths:
          - path: /
            pathType: ImplementationSpecific
            servicePort: admin
      - host: aries-endorser-service-dev.apps.silver.devops.gov.bc.ca
        paths:
          - path: /
            pathType: ImplementationSpecific
            servicePort: endorserService
    tls: []
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  livenessProbe:
    httpGet:
      path: /status/live
      port: admin
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 40
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /status/ready
      port: admin
    initialDelaySeconds: 3
    periodSeconds: 30
    timeoutSeconds: 40
    failureThreshold: 5
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 9
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 75
  # Caddy configuration
  caddyConfig:
    # Inline Caddyfile content. If empty, a default will be generated.
    caddyfile: |
      :2015 {
        respond "Caddy proxy running" 200
      }
  # Environment variable overrides
  env: {}
  # Extra envFrom entries (secrets/configmaps)
  envFrom: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  networkPolicy:
    enabled: false # deprecated (use networkPolicy.proxy.*)
    ingress: []    # deprecated
  # Optionally use existing configMap instead of generated
  existingConfigMap: ""
  caddyConfigFileName: Caddyfile
  caddyConfigMountPath: /etc/caddy/
  # Upstream service info (AcaPy + API) is derived automatically; no duplication needed.

# Optional API-level secrets
api:
  publicName: "BC Endorser Service (dev)"
  publicDesc: "An endorser service for BC issuer agents"

  adminUser: endorser-admin
  acapyAdminUrl: ""
  logLevel: info
  autoAcceptConnections: false
  autoAcceptAuthors: false
  autoEndorseRequests: false
  autoEndorseTxnTypes: ""
  rejectByDefault: false
  webConcurrency: "2"

  secret:
    # If provided, the chart will not create an API secret and will reference this one for admin creds
    existingSecret: ""
    # Keys in the existing secret
    keys:
      endorserAdminApiKey: endorser-admin-api-key
      webhookApiKey: webhook-api-key

# AcaPy subchart configuration (passed through)
acapy:
  enabled: true
  # Example settings; fine-tune per environment
  argfile.yml:
    endorser-alias: ""
    endorser-protocol-role: endorser
    requests-through-public-did: true
    auto-promote-author-did: false
    public-invites: true
    notify-revocation: true
    monitor-revocation-notification: true
    wallet-name: aries-endorser-agent-wallet
    read-only-ledger: false

  agentUrl: ""
  adminUrl: ""

  ingress:
    agent:
      enabled: false
      hostname: ""
    admin:
      enabled: false
      hostname: ""

  websockets:
    enabled: false

  service:
    ports:
      http: 8021
      admin: 8022
      ws: 8023

  persistence:
    enabled: false

  postgresql:
    enabled: true
    # Name override to avoid collisions with the API's PostgreSQL subchart
    # This will render DB resources as "<release>-acapy-postgresql" instead of "<release>-postgresql"
    nameOverride: acapy-postgresql

# PostgreSQL for API database (Bitnami subchart)
postgresql:
  enabled: true
  auth:
    username: endorser
    database: endorser
    # existingSecret: ""   # If set, will pull credentials from this secret
  primary:
    persistence:
      enabled: true
      size: 1Gi

# Use an external database for API instead of bundled Bitnami PostgreSQL
externalDatabase:
  host: ""
  port: 5432
  database: ""
  username: ""
  existingSecret: ""   # secret containing user/password
  secretKeys:
    userPasswordKey: password
    adminPasswordKey: postgres-password
