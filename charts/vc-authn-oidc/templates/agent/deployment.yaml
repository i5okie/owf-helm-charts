{{- $acapyFullName := include "acapy.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $acapyFullName }}
  labels:
    {{- include "acapy.labels" . | nindent 4 }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/agent/configmap.yaml") . | sha256sum }}
    checksum/acapy-secrets: {{ include (print $.Template.BasePath "/agent/secrets.yaml") . | sha256sum }}
spec:
  {{- if not .Values.acapy.autoscaling.enabled }}
  replicas: {{ .Values.acapy.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "acapy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.acapy.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "acapy.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.acapy.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "acapy.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.acapy.serviceAccount.automountServiceAccountToken }}
      securityContext:
        {{- toYaml .Values.acapy.podSecurityContext | nindent 8 }}
      containers:
        - name: acapy
          securityContext:
            {{- toYaml .Values.acapy.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.acapy.image.repository }}:{{ .Values.acapy.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.acapy.image.pullPolicy }}
          command:
          - /bin/bash
          args: [
           "-c",
           "aca-py start \
           --inbound-transport http '0.0.0.0' {{ .Values.acapy.service.httpPort }} \
           --outbound-transport http \
           --admin '0.0.0.0' {{ .Values.acapy.service.adminPort }} \
           --arg-file 'argfile.yml'        
           "
          ]
          ports:
            - name: http
              containerPort: {{ .Values.acapy.service.httpPort }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.acapy.service.adminPort }}
              protocol: TCP
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "acapy.database.secretName" . }}
                  key: {{ .Values.acapy.walletStorageCredentials.secretKeys.userPasswordKey }}
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "acapy.database.secretName" . }}
                  key: {{ .Values.acapy.walletStorageCredentials.secretKeys.adminPasswordKey }}
            - name: WEBHOOK_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "vc-authn-oidc.apiSecretName" . }}
                  key: controllerApiKey
            - name: ACAPY_ENDPOINT
              value: {{ include "acapy.agent.url" . }}
            - name: ACAPY_WALLET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "acapy.secretName" . }}
                  key: walletKey
            - name: ACAPY_ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "acapy.secretName" . }}
                  key: adminApiKey
                  optional: true
            - name: ACAPY_WALLET_SEED
              valueFrom:
                secretKeyRef:
                  name: {{ template "acapy.fullname" . }}
                  key: seed
            - name: ACAPY_WALLET_STORAGE_CONFIG
              value: {{ include "acapy.walletStorageConfig" . }}
            - name: ACAPY_WALLET_STORAGE_CREDS
              value: {{ include "acapy.walletStorageCredentials" . }}
          readinessProbe:
            httpGet:
              path: /status/ready
              port: {{ .Values.acapy.service.adminPort }}
            initialDelaySeconds: 60
            periodSeconds: 10    
          livenessProbe:
            httpGet:
              path: /status/live
              port: {{ .Values.acapy.service.adminPort }}
            initialDelaySeconds: 90
            periodSeconds: 10 
          volumeMounts:
          - name: config
            mountPath: "/home/aries/argfile.yml"
            subPath: "argfile.yml"
            readOnly: true
          - name: config
            mountPath: "/tmp/ledgers.yml"
            subPath: "ledgers.yml"
            readOnly: true
          - name: tails
            mountPath: {{ .Values.acapy.persistence.mountPath }}
          resources:
            {{- toYaml .Values.acapy.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ $acapyFullName }}-config
      {{- if .Values.acapy.persistence.existingClaim }}
        - name: tails
          persistentVolumeClaim:
            claimName: {{ tpl .Values.acapy.persistence.existingClaim $ }}
      {{- else }}
        - name: tails
          persistentVolumeClaim:
            claimName: {{ include "acapy.tails.pvc.name" . }}
      {{- end }}
      {{- with .Values.acapy.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.acapy.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.acapy.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
