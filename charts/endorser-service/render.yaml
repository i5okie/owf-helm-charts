---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: acapy-postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: endorser-service/charts/acapy/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: endorser-service-acapy
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: acapy
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8021
          protocol: TCP
        - port: 8022
          protocol: TCP
---
# Source: endorser-service/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: acapy-postgresql
      app.kubernetes.io/component: primary
---
# Source: endorser-service/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
automountServiceAccountToken: false
---
# Source: endorser-service/charts/acapy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: endorser-service-acapy
  namespace: "4a9599-tools"
  labels: 
    app.kubernetes.io/component: agent
automountServiceAccountToken: false
---
# Source: endorser-service/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
automountServiceAccountToken: false
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
type: Opaque
data:
  postgres-password: "cWFGQ3gyMjMySg=="
  password: "a05KMU1IeVlUdg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: endorser-service/charts/acapy/templates/api-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  name: endorser-service-acapy-api
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
  namespace: 4a9599-tools
type: Opaque
data:
  jwt: UnU2V25BbG4xWGlLYklieWJSMXpxN3Zla2hFbTZONnI=
  webhookapi: NFZIMWV6ZGp0bkhnYzluejdhdWwwQktETTJpbG04MkQ=
  adminApiKey: TjJraXBJMHRBWHVwYWt0aURvbzZHTE80WkprMGliSGg=
  walletKey: dHc3R1dEY3BVUHNkV1M5eWdLZFI0ZTRJTlZwSFphVnQ=
---
# Source: endorser-service/charts/acapy/templates/seed-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: endorser-service-acapy-seed
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
  annotations:
    helm.sh/resource-policy: keep
  namespace: 4a9599-tools
type: Opaque
data:
  seed: MWNGek0wZk1PdjM2czZtbEIydTYxOFpOWUZYOUR1RHo=
---
# Source: endorser-service/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
type: Opaque
data:
  postgres-password: "czl6eXdnTmVJeA=="
  password: "VG1BM280eE0zVg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: endorser-service/templates/api/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: endorser-service-api
  labels:
    helm.sh/chart: endorser-service-0.1.0
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  endorser-admin-api-key: Y0ZGVFNEbHVOalZTVDB0cGVWcENSRkZPTm1aVmNIbEljR3BMZUVVeFRGZz0=
  webhook-api-key: WmpreU1WQTVZalIzWkRJeE5tVjJTSEZZWTBSVmQxcFNaRzFCUjJsbVExTT0=
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: endorser-service-acapy-postgresql-extended-configuration
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    max_connections = 500
---
# Source: endorser-service/charts/acapy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: endorser-service-acapy-config
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
data:
  argfile.yml: |
    label: "endorser-service-acapy"
    inbound-transport:
      - [http, 0.0.0.0, 8021]
    outbound-transport:
      - http
    endpoint:
      - "https://"
    admin:
      - 0.0.0.0
      - 8022
    admin-insecure-mode: false
    auto-accept-invites: true
    auto-accept-requests: true
    auto-create-revocation-transactions: false
    auto-ping-connection: true
    auto-promote-author-did: false
    auto-provision: true
    auto-request-endorsement: false
    auto-respond-credential-offer: true
    auto-respond-credential-proposal: false
    auto-respond-credential-request: false
    auto-respond-messages: true
    auto-respond-presentation-proposal: true
    auto-respond-presentation-request: false
    auto-store-credential: true
    auto-verify-presentation: false
    auto-write-transactions: false
    emit-new-didcomm-mime-type: true
    emit-new-didcomm-prefix: true
    endorser-alias: ""
    endorser-protocol-role: endorser
    genesis-transactions-list: /tmp/ledgers.yml
    log-level: info
    monitor-ping: false
    monitor-revocation-notification: true
    multitenant: false
    multitenant-admin: false
    notify-revocation: true
    preserve-exchange-records: true
    public-invites: true
    read-only-ledger: false
    requests-through-public-did: true
    wallet-local-did: true
    wallet-name: aries-endorser-agent-wallet
    wallet-storage-type: postgres_storage
    wallet-type: askar
    webhook-url: 'https:///webhooks'
    wallet-storage-config: '{"url":"endorser-service-acapy-postgresql:5432","max_connections":"10","wallet_scheme":"DatabasePerWallet"}'
  ledgers.yml: |
    - endorser_alias: bcovrin-test-endorser
      endorser_did: DfQetNSm7gGEHuzfUvpfPn
      genesis_url: http://test.bcovrin.vonx.io/genesis
      id: bcovrin-test
      is_production: true
      is_write: true
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service-acapy-postgresql-hl
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/component: primary
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/component: primary
---
# Source: endorser-service/charts/acapy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service-acapy
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8021
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: admin
      port: 8022
      protocol: TCP
      targetPort: admin
      nodePort: null
  selector:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/name: acapy
---
# Source: endorser-service/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service-postgresql-hl
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: endorser-service/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: endorser-service/templates/api/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: endorser-service
  labels:
    helm.sh/chart: endorser-service-0.1.0
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
---
# Source: endorser-service/charts/acapy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: endorser-service-acapy
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy
    app.kubernetes.io/version: 1.3.1
    helm.sh/chart: acapy-0.2.3
    app.kubernetes.io/component: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: acapy
  strategy: 
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 1c2225f4b53b74792e7895fad3a986575ebe63e4f65ed396c410d930b2b8a2cc
      labels:
        app.kubernetes.io/instance: endorser-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: acapy
        app.kubernetes.io/version: 1.3.1
        helm.sh/chart: acapy-0.2.3
        app.kubernetes.io/component: agent
    spec:
      automountServiceAccountToken: false
      serviceAccountName: endorser-service-acapy
      
      affinity:
        podAntiAffinity: 
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: endorser-service
                    app.kubernetes.io/name: acapy
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: acapy
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          image: ghcr.io/openwallet-foundation/acapy-agent:py3.12-1.3.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - '-c'
          args:
            - >-
              aca-py start
              --arg-file '/home/aries/argfile.yml'
          env:
            - name: ACAPY_ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-api
                  key: adminApiKey
                  optional: true
            - name: ACAPY_WALLET_KEY
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-api
                  key: walletKey
            - name: ACAPY_WALLET_SEED
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-seed
                  key: seed
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-postgresql
                  key: postgres-password
            - name: ACAPY_MULTITENANT_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-api
                  key: jwt
            - name: ACAPY_WALLET_STORAGE_CREDS
              value: '{"account":"acapy","password":"$(POSTGRES_PASSWORD)","admin_account":"postgres","admin_password":"$(POSTGRES_POSTGRES_PASSWORD)"}'
          ports:
            - name: http
              containerPort: 8021
              protocol: TCP
            - name: admin
              containerPort: 8022
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /status/live
              port: admin
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /status/ready
              port: admin
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
            - name: empty-dir
              mountPath: /home/aries/.acapy_agent/vdr
            - name: config
              mountPath: "/home/aries/argfile.yml"
              subPath: "argfile.yml"
              readOnly: true
            - name: config
              mountPath: "/tmp/ledgers.yml"
              subPath: "ledgers.yml"
              readOnly: true
            - name: config
              mountPath: "/home/aries/plugin-config.yml"
              subPath: "plugin-config.yml"
              readOnly: true
            - name: tails-data
              mountPath: "/home/aries/.indy_client/tails"
      volumes:
        - name: tails-data
          emptyDir: {}
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: endorser-service-acapy-config
---
# Source: endorser-service/templates/api/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: endorser-service
  labels:
    helm.sh/chart: endorser-service-0.1.0
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: endorser-service
      app.kubernetes.io/instance: endorser-service
  template:
    metadata:
      labels:
        helm.sh/chart: endorser-service-0.1.0
        app.kubernetes.io/name: endorser-service
        app.kubernetes.io/instance: endorser-service
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: default
      containers:
        - name: acapy-endorser-api
          image: "ghcr.io/openwallet-foundation/acapy-endorser-service/endorser:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: ACAPY_ADMIN_HOST
              value: "endorser-service-acapy-admin-dev.apps.silver.devops.gov.bc.ca"
            - name: ACAPY_ADMIN_URL
              value: "http://endorser-service-acapy:8022"
            - name: ACAPY_API_ADMIN_KEY
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-api
                  key: adminApiKey
            - name: ACAPY_WEBHOOK_URL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: endorser-service-api
                  key: webhook-api-key
            - name: CONTROLLER_POSTGRESQL_HOST
              value: "endorser-service-postgresql"
            - name: CONTROLLER_POSTGRESQL_PORT
              value: "5432"
            - name: CONTROLLER_POSTGRESQL_DB
              value: "endorser"
            - name: CONTROLLER_POSTGRESQL_USER
              value: "endorser"
            - name: CONTROLLER_POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-postgresql
                  key: "password"
            - name: CONTROLLER_POSTGRESQL_ADMIN_USER
              value: "postgres"
            - name: CONTROLLER_POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-postgresql
                  key: "postgres-password"
            - name: ENDORSER_SERVICE_PORT
              value: "5000"
            - name: ENDORSER_API_ADMIN_USER
              value: "endorser-admin"
            - name: ENDORSER_API_ADMIN_KEY
              valueFrom:
                secretKeyRef:
                  name: endorser-service-api
                  key: endorser-admin-api-key
            - name: ENDORSER_ENV
              value: dev
            - name: ENDORSER_PUBLIC_NAME
              value: "BC Endorser Service (dev)"
            - name: ENDORSER_PUBLIC_DESC
              value: "An endorser service for BC issuer agents"
            - name: ENDORSER_AUTO_ACCEPT_CONNECTIONS
              value: "false"
            - name: ENDORSER_AUTO_ACCEPT_AUTHORS
              value: "false"
            - name: ENDORSER_AUTO_ENDORSE_REQUESTS
              value: "false"
            - name: ENDORSER_AUTO_ENDORSE_TXN_TYPES
              value: ""
            - name: ENDORSER_REJECT_BY_DEFAULT
              value: "false"
            - name: WEB_CONCURRENCY
              value: "2"
          envFrom:
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
---
# Source: endorser-service/charts/acapy/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: endorser-service-acapy-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: acapy-postgresql
    app.kubernetes.io/version: 16.4.0
    helm.sh/chart: postgresql-15.5.38
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: endorser-service-acapy-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: acapy-postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: endorser-service-acapy-postgresql
      labels:
        app.kubernetes.io/instance: endorser-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: acapy-postgresql
        app.kubernetes.io/version: 16.4.0
        helm.sh/chart: postgresql-15.5.38
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: f231c584ead90a4176b09eb6d6073240ab2939b8bd09b20013265962083b3208
    spec:
      serviceAccountName: endorser-service-acapy-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: endorser-service
                    app.kubernetes.io/name: acapy-postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnamilegacy/postgresql:16.4.0-debian-12-r14
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "acapy"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-acapy-postgresql
                  key: postgres-password
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "acapy" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "acapy" -h 127.0.0.1 -p 5432
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: postgresql-extended-config
          configMap:
            name: endorser-service-acapy-postgresql-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: endorser-service/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: endorser-service-postgresql
  namespace: "4a9599-tools"
  labels:
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.2.0
    helm.sh/chart: postgresql-16.3.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: endorser-service-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: endorser-service
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: endorser-service-postgresql
      labels:
        app.kubernetes.io/instance: endorser-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 17.2.0
        helm.sh/chart: postgresql-16.3.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: endorser-service-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: endorser-service
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.2.0-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "endorser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: endorser-service-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "endorser"
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "endorser" -d "dbname=endorser" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "endorser" -d "dbname=endorser" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: endorser-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: endorser-service
  labels:
    helm.sh/chart: endorser-service-0.1.0
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "endorser-api-tools.apps.silver.devops.gov.bc.ca"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: endorser-service
                port:
                  number: 5000
---
# Source: endorser-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "endorser-service-test-connection"
  labels:
    helm.sh/chart: endorser-service-0.1.0
    app.kubernetes.io/name: endorser-service
    app.kubernetes.io/instance: endorser-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['endorser-service:5000']
  restartPolicy: Never
